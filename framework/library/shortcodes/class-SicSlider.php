<?php

class SliderShortcode
{
    public function __construct()
    {
        add_action('template_redirect', array($this, 'enqueue_assets'));
        add_action('init', array($this, 'add_shortcode'));
    }
    
    public function enqueue_assets()
    {		wp_enqueue_script( "flexslider",  get_bloginfo('template_directory') . "/framework/packages/flexslider/jquery.flexslider-min.js", array('jquery'), '1');

//		wp_enqueue_script( "flexslider",  get_bloginfo('template_directory') . "/framework/packages/flexslider/jquery.flexslider-min.js", array('jquery'), '2.1', "");
		//wp_enqueue_style( "flexslider",  get_bloginfo('template_directory') . "/framework/packages/flexslider/flexslider.css", 'flexslider', '3.1.4');
      
	}

    public function add_shortcode()
    {
        add_shortcode('slider', array($this, 'do_shortcode'));
        add_shortcode('slider_element', array($this, 'do_shortcode_slider_element'));
      //  remove_filter('the_content', 'wpautop');
    }
    
    public function do_shortcode($atts, $content = null)
    {
        $slider = new Slider($content, $atts);

        return $slider->output();
    }

    public function do_shortcode_slider_element($atts, $content = null)
    {
        return $content;
    }
}





class Slider
{
    private $id;
    public $settings = array();
    public $content = array();
    
    public function getId()
    {
        return $this->id;
    }
    
    public function setId($id)
    {
        $this->id = $id;
        return $this;
    }

    public function getContent()
    {
        return $this->content;
    }
    
    public function setContent($content)
    {
		// if the content is a string run it as a shortcode.
        if (is_string($content)) {
			
            $content = do_shortcode($content);
            
			//check to see if there is HTML in the string
            if ($content != strip_tags($content)) {
				//match any new line with 0 or more, and 0/1
                preg_match_all('/(.*?)\n/i', $content, $matches);
            } else {
				//match any URL followed by a new line
                preg_match_all('/(http|https):\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(.*?)\n/i', $content, $matches);
            }
			//store each full url as a field in the $content array
            $content = $matches[0];
	
            //run through array and remove new lines and blank entries
			foreach ($content as $key => $value) {
				//take off that new line we've been using to separate content
                $value = trim($value);
				//remove any entries that were just new lines
                if (empty($value)) unset($content[$key]);
            }

			
        }
        
        //sets the objects content to the one we've been working on
		$this->content = $content;
		
		//return the object for chaining
        return $this;
  
    } //public function setContent()

    public function setOptions(array $settings)
    {
        $this->settings = $settings;
        
        return $this;
    }

    public function __construct($content, $args = array())
    {
		//no content no construct!
        if ( ! $content ) {
            return;
        }
		
        //automatically sets an ID if none was set can set ohter defaults here. Set everything to null so options are available but flexslider defaults will be used. Any of these can be override
		$atts = shortcode_atts(array('id' => 'fs_' . rand(5, 15),

		//'namespace' => 'flex-',             //{NEW} String => Prefix string attached to the class of every element generated by the plugin
		'selector' => NULL,       //{NEW} Selector => Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
		'animation' => 'slide',              //String => Select your animation type, 'fade' or 'slide'
		'easing' => NULL,               //{NEW} String => Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!
		'direction' => NULL,        //String => Select the sliding direction, 'horizontal' or 'vertical'
		'reverse' => NULL,                 //{NEW} Boolean => Reverse the animation direction
		'animationLoop' => NULL,             //Boolean => Should the animation loop? If false, directionNav will received 'disable' classes at either end
		'smoothHeight' => NULL,            //{NEW} Boolean => Allow height of the slider to animate smoothly in horizontal mode
		'startAt' => NULL,                     //Integer => The slide that the slider should start on. Array notation (0 = first slide)
		'slideshow' => NULL,                //Boolean => Animate slider automatically
		'slideshowSpeed' => NULL,           //Integer => Set the speed of the slideshow cycling, in milliseconds
		'animationSpeed' => NULL,            //Integer => Set the speed of animations, in milliseconds
		'initDelay' => NULL,                   //{NEW} Integer => Set an initialization delay, in milliseconds
		'randomize' => NULL,               //Boolean => Randomize slide order
 
		// Usability features
		'pauseOnAction' => NULL,            //Boolean => Pause the slideshow when interacting with control elements, highly recommended.
		'pauseOnHover' => NULL,            //Boolean => Pause the slideshow when hovering over slider, then resume when no longer hovering
		'useCSS' => NULL,                   //{NEW} Boolean => Slider will use CSS3 transitions if available
		'touch' => NULL,                    //{NEW} Boolean => Allow touch swipe navigation of the slider on touch-enabled devices
		'video' => NULL,                   //{NEW} Boolean => If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches
 
		// Primary Controls
		'controlNav' => NULL,               //Boolean => Create navigation for paging control of each clide? Note => Leave true for manualControls usage
		'directionNav' => NULL,             //Boolean => Create navigation for previous/next navigation? (true/false)
		'prevText' => NULL,           //String => Set the text for the 'previous' directionNav item
		'nextText' => NULL,               //String => Set the text for the 'next' directionNav item
 
		// Secondary Navigation
		'keyboard' => NULL,                 //Boolean => Allow slider navigating via keyboard left/right keys
		'multipleKeyboard' => NULL,        //{NEW} Boolean => Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
		'mousewheel' => NULL,              //{UPDATED} Boolean => Requires jquery.mousewheel.js (https =>//github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel
		'pausePlay' => NULL,               //Boolean => Create pause/play dynamic element
		'pauseText' => NULL,             //String => Set the text for the 'pause' pausePlay item
		'playText' => NULL,               //String => Set the text for the 'play' pausePlay item
 
		// Special properties
		'controlsContainer' => NULL,          //{UPDATED} Selector => USE CLASS SELECTOR. Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be '.flexslider-container'. Property is ignored if given element is not found.
		'manualControls' => NULL,             //Selector => Declare custom control navigation. Examples would be '.flex-control-nav li' or '#tabs-nav li img', etc. The number of elements in your controlNav should match the number of slides/tabs.
		'sync' => NULL,                       //{NEW} Selector => Mirror the actions performed on this slider with another slider. Use with care.
		'asNavFor' => NULL,                   //{NEW} Selector => Internal property exposed for turning the slider into a thumbnail navigation for another slider
 
		// Carousel Options 'itemWidth' => 0, //{NEW} Integer => Box-model width of individual carousel items, including horizontal borders and padding. 'itemMargin' => 0, //{NEW} Integer => Margin between carousel items. 'minItems' => 0, //{NEW} Integer => Minimum number of carousel items that should be visible. Items will resize fluidly when below this. 'maxItems' => 0, //{NEW} Integer => Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit. 'move' => 0, //{NEW} Integer => Number of carousel items that should move on animation. If 0, slider will move all visible items.
 
		// Callback API
		// 'start' => function(){},            //Callback => function(slider) - Fires when the slider loads the first slide
		// 'before' => function(){},           //Callback => function(slider) - Fires asynchronously with each slider animation
		// 'after' => function(){},            //Callback => function(slider) - Fires after each slider animation completes
		// 'end' => function(){},              //Callback => function(slider) - Fires when the slider reaches the last slide (asynchronous)
		// 'added' => function(){},            //{NEW} Callback => function(slider) - Fires after a slide is added
		// 'removed' => function(){},  
		// 
		// 	
	
	), $args);
        
	//put the js in in the footer
    add_action('wp_footer', array($this, 'outputSettings'));
		
		
	//chain all the methods to get slider ready for output
    $this->setId($atts['id'])
        ->setOptions($atts)
        ->setContent($content);

        return $this;
    }

    
    public function output()
    {
        $content = $this->getContent();
        
        $output = NULL;
        if (is_array($content)) {
            $output .= PHP_EOL .'<div id="'. $this->getId() .'" class="flexslider">'. PHP_EOL .'<ul class="slides">' . PHP_EOL;
            foreach ($content as $_content) {
                if ($_content != strip_tags($_content)) {
                    $output .= '<li>'. trim($_content) .'</li>' . PHP_EOL;
                } else {
                $output .= '<li data-thumb="'. trim($_content) .'"><img src="'. trim($_content) .'" /></li>' . PHP_EOL;
                }
                
            }
            $output .= '</ul>'. PHP_EOL .'</div>' . PHP_EOL;
        }
        
        return $output;
    }

    
	public function outputSettings()
    {	
        ?>
        <script type="text/javascript">
     
	    jQuery(document).ready(function($){
            
			$('#<?php echo $this->getId(); ?>').flexslider({
				
				<?php
				
				 foreach($this->settings as $key => $value){
				//loop through all the settings the shortcode or user passed
				//are there values that aren't ID we'll need to check them and pass them to flexslider
				if($key != "id" && isset($value)){
					//passing a boolean
					if(is_bool($value)){
						
						//if true
						 if($value){
		 					echo $key . ": true, \n";
						 }
						 //if false
							 else{
	 		 					echo $key . ": false, \n";
							 }
							 
						 }//if_bool
					
					// if it isnt a bool but it is a number 	 
					elseif(is_numeric($value)){
						echo $key . ':' . $value . ",\n";
					}
						 
					// strings get passed in quotes
					 else{
						 echo $key . ':"' . $value . "\",\n";
					 
					 }
					 
				}//if($value && $key != "id"){

			
			} //foreach ?> 
				
			});
        }); 
        </script>
        
		<?php
    }//output setting

}//class Slider

$sliderShortcode = new SliderShortcode;



/*
[slider id="boo" speed="900" animate="fade"]
http://lorempixel.com/400/200/sports/
http://lorempixel.com/400/200/sports/
http://lorempixel.com/400/200/sports/
[/slider]


[slider id="soo"]
[slider_element]<img src="http://lorempixel.com/400/200/" />[/slider_element]
[slider_element]<img src="http://lorempixel.com/400/200/sports/" />
<p class="flex-caption">Captions and cupcakes. Winning combination.</p>[/slider_element]
[/slider]
